<?php

/**
 * This is the template for generating the model class of a specified table.
 * DO NOT EDIT THIS FILE! It may be regenerated with Gii.
 *
 * @var yii\web\View $this
 * @var schmunk42\giiant\generators\model\Generator $generator
 * @var string $tableName full table name
 * @var string $className class name
 * @var yii\db\TableSchema $tableSchema
 * @var string[] $labels list of attribute labels (name => label)
 * @var string[] $rules list of validation rules
 * @var array $relations list of relations (name => relation declaration)
 */
echo "<?php\n";
?>

namespace <?php 
echo $generator->ns;
?>\base;

use Yii;
<?php 
if (isset($translation)) {
    ?>
use dosamigos\translateable\TranslateableBehavior;
<?php 
}
?>

/**
 * This is the base-model class for table "<?php 
echo $tableName;
?>".
 *
<?php 
foreach ($tableSchema->columns as $column) {
    ?>
 * @property <?php 
    echo "{$column->phpType} \${$column->name}\n";
}
if (!empty($relations)) {
    ?>
 *
<?php 
    foreach ($relations as $name => $relation) {
        ?>
 * @property \<?php 
        echo $ns;
        ?>\<?php 
        echo $relation[1] . ($relation[2] ? '[]' : '') . ' $' . lcfirst($name) . "\n";
    }
}
?>
 */
class <?php 
echo $className;
?> extends <?php 
echo '\\' . ltrim($generator->baseClass, '\\') . "\n";
?>
{

<?php 
$traits = $generator->baseTraits;
if ($traits) {
    echo "use {$traits};";
}
?>


<?php 
if (!empty($enum)) {
    ?>
    /**
    * ENUM field values
    */
<?php 
    foreach ($enum as $column_name => $column_data) {
        foreach ($column_data['values'] as $enum_value) {
            echo '    const ' . $enum_value['const_name'] . ' = \'' . $enum_value['value'] . '\';' . PHP_EOL;
        }
    }
    ?>
    var $enum_labels = false;
<?php 
}
?>
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '<?php 
echo $tableName;
?>';
    }
<?php 
if (isset($translation)) {
    ?>
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'translatable' => [
                'class' => TranslateableBehavior::className(),
                // in case you renamed your relation, you can setup its name
                // 'relation' => 'translations',
<?php 
    if ($generator->languageCodeColumn !== 'language') {
        ?>
                'languageField' => '<?php 
        echo $generator->languageCodeColumn;
        ?>',
<?php 
    }
    ?>
                'translationAttributes' => [
                    <?php 
    echo "'" . implode("',\n                    '", $translation['fields']) . "'\n";
    ?>
                ]
            ],
        ];
    }
<?php 
}
?>

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [<?php 
echo "\n            " . implode(",\n            ", $rules) . "\n        ";
?>];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
<?php 
foreach ($labels as $name => $label) {
    ?>
            <?php 
    echo "'{$name}' => " . $generator->generateString($label) . ",\n";
}
?>
        ];
    }
<?php 
foreach ($relations as $name => $relation) {
    ?>

    /**
     * @return \yii\db\ActiveQuery
     */
    public function get<?php 
    echo $name;
    ?>()
    {
        <?php 
    echo $relation[0] . "\n";
    ?>
    }
<?php 
}
?>

<?php 
if (isset($translation)) {
    ?>
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTranslations()
    {
        <?php 
    echo $translation['code'] . "\n";
    ?>
    }
<?php 
}
?>

<?php 
if ($queryClassName) {
    ?>
    <?php 
    $queryClassFullName = $generator->ns === $generator->queryNs ? $queryClassName : '\\' . $generator->queryNs . '\\' . $queryClassName;
    echo "\n";
    ?>
    /**
     * @inheritdoc
     * @return <?php 
    echo $queryClassFullName;
    ?> the active query used by this AR class.
     */
    public static function find()
    {
        return new <?php 
    echo $queryClassFullName;
    ?>(get_called_class());
    }
<?php 
}
?>

<?php 
foreach ($enum as $column_name => $column_data) {
    ?>

    /**
     * get column <?php 
    echo $column_name;
    ?> enum value label
     * @param string $value
     * @return string
     */
    public static function <?php 
    echo $column_data['func_get_label_name'];
    ?>($value){
        $labels = self::<?php 
    echo $column_data['func_opts_name'];
    ?>();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column <?php 
    echo $column_name;
    ?> ENUM value labels
     * @return array
     */
    public static function <?php 
    echo $column_data['func_opts_name'];
    ?>()
    {
        return [
<?php 
    foreach ($column_data['values'] as $k => $value) {
        ?>
            self::<?php 
        echo $value['const_name'];
        ?> => <?php 
        echo $generator->generateString($value['label']);
        ?>,
<?php 
    }
    ?>
        ];
    }
<?php 
}
?>

}
<?php 

?>